from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from config import TELEGRAM_TOKEN
from nlp_module import SentimentAnalyzer
from myth_quiz import MythQuiz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from db import init_db, save_feedback_to_db

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

async def on_startup(_):
    init_db()
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()

@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    start_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∫–≤–∏–∑", callback_data="quiz:start")]
    ])
    await message.answer("üëã–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ù–µ–π—Ä–æ–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π!\n"
                         "–î–∞–≤–∞–π —Å —Ç–æ–±–æ–π –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∫–≤–∏–∑ –ø–æ –º–∏—Ñ–∞–º –æ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö. \n\n"
                         "–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç—ã –∑–Ω–∞–µ—à—å –Ω–µ–π—Ä–æ–Ω–∫–∏?üòâ", parse_mode="Markdown",
        reply_markup=start_buttons)

myth_quiz = MythQuiz("data/myth_data.csv")
user_sessions = {}
sentiment_analyzer = SentimentAnalyzer()

@dp.callback_query_handler(lambda c: c.data == "leave_feedback")
async def process_feedback_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    #—Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    user_sessions[user_id] = {"awaiting_feedback": True}

    await FeedbackStates.waiting_for_feedback.set()
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üí¨")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "quiz:start")
async def quiz_start_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_sessions[user_id] = {"score": 0, "index": 0}
    await send_next_question(user_id, callback)

async def send_next_question(user_id, message_or_callback):
    session = user_sessions[user_id]
    index = session["index"]

    if index >= myth_quiz.get_total():
        score = session["score"]
        del user_sessions[user_id]
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="quiz:restart")]
        ])
        await message_or_callback.message.answer(f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –±–∞–ª–ª–æ–≤.\n\n"
                                                 f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö, –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–µ–±–µ –∫–≤–∏–∑?üòä", reply_markup=markup)
        user_sessions[user_id] = {"awaiting_feedback": True}
        return

    idx, statement, is_true, explanation = myth_quiz.get_question(index)
    keyboard = myth_quiz.get_keyboard(idx)

    if isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.answer(f"‚ùì {statement}", reply_markup=keyboard)
    else:
        await message_or_callback.answer(f"‚ùì {statement}", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "quiz:restart")
async def restart_quiz(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_sessions[user_id] = {"score": 0, "index": 0}
    await callback.message.delete()
    await send_next_question(user_id, callback)

@dp.callback_query_handler(lambda c: c.data.startswith("quiz:"))

async def handle_quiz_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, question_index, user_answer = callback.data.split(":")
    correct_answer, explanation = myth_quiz.get_question(int(question_index))[2:]

    session = user_sessions[user_id]
    if user_answer == correct_answer:
        session["score"] += 1
        result = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        result = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ."

    await callback.message.edit_text(f"{result}\n\n‚ÑπÔ∏è {explanation}")
    session["index"] += 1
    await send_next_question(user_id, callback)

@dp.message_handler(state=FeedbackStates.waiting_for_feedback)
async def handle_feedback_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    label, confidence, emoji = sentiment_analyzer.analyze(text)
    feedback_reply = sentiment_analyzer.generate_response(label)
    save_feedback_to_db(user_id, text, label, confidence)

    await message.reply(
        f"{feedback_reply}\n(–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ *{label}*, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})",
        parse_mode="Markdown"
    )

    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)